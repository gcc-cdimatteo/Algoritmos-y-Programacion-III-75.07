@startuml
skinparam classAttributeIconSize 0

interface Puntaje {
    + puntuar(Integer aciertos, Integer errores): Integer
}

class PuntajeClasico {
    - aciertosEsperados: int
    + {static} ParaVerdaderoFalso(): PuntajeClasico
    + {static} ParaMultipleChoice(Set opcionesCorrectas): PuntajeClasico
    + puntuar(Integer aciertos, Integer errores): Integer
}

class PuntajeParcial {
    + puntuar(Integer aciertos, Integer errores): Integer
}

class PuntajePenalidad {
    + puntuar(Integer aciertos, Integer errores): Integer
}

interface Respuesta {
    + evaluar(Respuesta respuestaUsuario): List<Integer>
    + permiteMultiplicadores(): boolean
    + permiteExclusividad(): boolean
}

class RespuestaGroupChoice {
    - grupoA: Set<Integer>
    - grupoB: Set<Integer>
    - equals(grupoA: Set<Integer>, grupoB: Set<Integer>): boolean
    + RespuestaGroupChoice(grupoA: Set<Integer>, grupoB: Set<Integer>)
    + equals(otraRespuesta: RespuestaGroupChoice): boolean
    + evaluar(respuestaUsuario: Respuesta): Integer
    + permiteMultiplicadores(): boolean
    + permiteExclusividad(): boolean
}

class RespuestaMultipleChoice {
    - opciones: Set<Integer>
    - puntaje: Puntaje
    - intersection(Set<Integer> opciones): Set<Integer>
    + RespuestaMultipleChoice(Set<Integer> opciones)
    + {static} ConPuntaje(Set<Integer> opciones, Puntaje puntaje): RespuestaMultipleChoice
    + intersection(RespuestaMultipleChoice respuesta): Set<Integer>
    + size(): Integer
    + evaluar(Respuesta respuestaUsuario): Integer
    + permiteMultiplicadores(): boolean
    + permiteExclusividad(): boolean
}

class RespuestaVerdaderoFalso {
    - respuesta: boolean
    - puntaje: Puntaje
    - equals(boolean otraRespuesta): boolean
    + RespuestaVerdaderoFalso(boolean respuesta)
    + {static} ConPuntaje(boolean respuesta, Puntaje puntaje): RespuestaVerdaderoFalso
    + equals(RespuestaVerdaderoFalso otraRespuesta): boolean
    + evaluar(Respuesta respuestaUsuario): Integer
    + permiteMultiplicadores(): boolean
    + permiteExclusividad(): boolean
}

class RespuestaOrderedChoice {
    - List<Integer> respuesta;
    - equals(List<Integer> otraRespuesta): boolean
    + RespuestaOrderedChoice(List<Integer> respuesta)
    + equals(RespuestaOrderedChoice otraRespuesta): boolean
    + evaluar(Respuesta respuestaUsuario): Integer
    + permiteMultiplicadores(): boolean
    + permiteExclusividad(): boolean
}

'Ordenamiento De Cuadrados

'Herencia --|> cumple la relación 'es un'

'Asociacion --> un objeto guarda a otro

'Agregacion --o un objeto esta compuesto por otro pero no lo necesita para vivir

'Composicion --* un objeto es dueño de otro
RespuestaVerdaderoFalso *-- Puntaje
RespuestaMultipleChoice *-- Puntaje

'Dependencia ..> un objeto utiliza a otro porque lo recibe/devuelve

'Interfaces ..|> colección de declaraciones de métodos sin implemetnar
RespuestaGroupChoice .down.|> Respuesta
RespuestaMultipleChoice .up.|> Respuesta
RespuestaOrderedChoice .down.|> Respuesta
RespuestaVerdaderoFalso .up.|> Respuesta
PuntajeClasico .up.|> Puntaje
PuntajePenalidad .up.|> Puntaje
PuntajeParcial .up.|> Puntaje


@enduml