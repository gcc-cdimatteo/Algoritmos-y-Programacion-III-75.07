@startuml
skinparam classAttributeIconSize 0

package AlgoKahoot {
    class AlgoKahoot {
    - finalizado: boolean
    - observers: List<Observer>
    - cambiarTurno()
    - cambiarJugador()
    + nuevaRonda()
    + puntajes(): List<Integer>
    + nombres(): List<String>
    + jugadorNoResponde()
    + cargarRespuesta(respuesta: Respuesta)
    + jugadorPuntaje(): int
    + jugadorNombre(): String
    + preguntaEnunciado(): String
    + preguntaOpciones(): List<String>
    + jugadorUsaMultiplicador(unValor: int)
    + jugadorUsaExclusividad()
    + finalizado(): boolean
    + permiteMultiplicadores(): boolean
    + multiplicadorDisponible(valor: int): boolean
    + permiteExclusividad(): boolean
    + addObserver(observer: Observer)
    + notifyObservers()
    + preguntaActual(): String
    }
    class Jugador {
        - nombre: String
        - puntaje: int
        - usosDisponiblesExclusividad: int
        - siguienteJugador: Jugador
        - vaPrimero: boolean
        - asignarSiguiente(otroJugador: Jugador)
        + nombre(): String
        + puntaje(): int
        + ordenarCon(otroJugador: Jugador)
        + vaPrimero(): boolean
        + siguienteJugador(): Jugador
        + puntuar(puntos: int)
        + usarMultiplicador(valor: int)
        + usarExclusividad()
        + exclusividadDisponible(): boolean
        + multiplicadorDisponible(valor: int): boolean
    }
    class Ronda {
        + cargarRespuesta(respuesta: Respuesta)
        + usarExclusividad(jugador: Jugador)
        + asignarPuntos()
        + enunciado(): String
        + opciones(): List<String>
        + permiteMultiplicadores(): boolean
        + permiteExclusividad(): boolean
        + preguntaActual(): String
        + jugadorNoResponde()
    }
    class FactoryPreguntas {
        - preguntas: Queue<Pregunta>
        + preguntas(): Queue<Pregunta>
        /'
        - obtenerEnunciado(pregunta: JSONObject): String
        - obtenerRespuestaVF(pregunta: JSONObject): boolean
        - generarPreguntaVerdaderoFalsoClasico(pregunta: JSONObject): Pregunta
        - generarPreguntaVerdaderoFalsoPenalidad(pregunta: JSONObject): Pregunta
        - obtenerRespuestasMC(pregunta: JSONObject): Set<Integer>
        - generarPreguntaMultipleChoicePenalidad(pregunta: JSONObject): Pregunta
        - generarPreguntaMultipleChoiceParcial(pregunta: JSONObject): Pregunta
        - generarPreguntaMultipleChoiceClasico(pregunta: JSONObject): Pregunta
        - generarPreguntaGroupChoice(pregunta: JSONObject): PreguntaGroupChoice
        - generarPreguntaOrderedChoice(pregunta: JSONObject): PreguntaOrderedChoice
        '/
    }
    interface Observable {
        + notifyObservers()
        + addObserver(observer: Observer)
    }
    interface Observer {
        + change()
    }
}

package Pregunta {
    abstract class Pregunta {
        # asString: String
        # enunciado: String
        # opciones: List<String>
        + responder(respuestasUsuario: List<Respuesta>): List<Integer>
        + toString(): String
        + getEnunciado(): String
        + getOpciones(): List<String>
        + permiteMultiplicadores(): boolean
        + permiteExclusividad(): boolean
        + respuestaIncorrecta(): Respuesta
    }
}

package Puntaje {
    interface Puntaje {
        + puntuar(aciertos: Integer, errores: Integer): Integer
        + permiteMultiplicadores(): boolean
        + permiteExclusividad(): boolean
    }
}

package Puntuadores {
    class Multiplicador {
        - valor: int
        - usosDisponibles: int
        + {static} Nulo()
        + {static} PorDos()
        + {static} PorTres()
        + multiplicar(unPuntaje: Integer): Integer
        + estaDisponible(): boolean
    }
    interface Puntuador {
        + calcularPuntos(puntos: List<Integer>): List<Integer>
        + usarExclusividad(jugador: Jugador): PuntuadorExclusividad
    }
    class PuntuadorExclusividad {
        - valor: int
        + calcularPuntos(puntos: List<Integer>): List<Integer>
        + usarExclusividad(jugador: Jugador): PuntuadorExclusividad
    }
    class PuntuadorNulo {
        + calcularPuntos(puntos: List<Integer>): List<Integer>
        + usarExclusividad(jugador: Jugador): PuntuadorExclusividad
    }
}

package Respuesta {
    interface Respuesta {
        + evaluar(Respuesta respuestaUsuario): List<Integer>
        + permiteMultiplicadores(): boolean
        + permiteExclusividad(): boolean
        + respuestaIncorrecta(): Respuesta
    }
}

'Ordenamiento De Cuadrados

'Herencia --|> cumple la relación 'es un'

'Asociacion --> un objeto guarda a otro
Pregunta --> Respuesta
Ronda -left-> "*" Pregunta
Ronda -down-> Puntuador
Ronda --> "*" Respuesta
Ronda -right-> "2" Jugador
AlgoKahoot --> Pregunta
AlgoKahoot -down-> Ronda
AlgoKahoot -down-> Jugador
Jugador --> Jugador

'Agregacion --o un objeto esta compuesto por otro pero no lo necesita para vivir
Jugador "1" o-- "3" Multiplicador
Respuesta o-- Puntaje

'Composicion --* un objeto es dueño de otro

'Dependencia ..> un objeto utiliza a otro porque lo recibe/devuelve
AlgoKahoot .up.> FactoryPreguntas

'Interfaces ..|> colección de declaraciones de métodos sin implemetnar
PuntuadorExclusividad .up.|> Puntuador
PuntuadorNulo .up.|> Puntuador
AlgoKahoot .left.|> Observable


@enduml